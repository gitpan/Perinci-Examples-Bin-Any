#!perl

# Note: This script is a CLI interface to Riap function /Perinci/Examples/CLI/demo_cli_opts
# and generated automatically using Dist::Zilla::Plugin::Rinci::ScriptFromFunc version 0.03

our $DATE = '2014-11-21'; # DATE
our $VERSION = '0.05'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => "/Perinci/Examples/CLI/demo_cli_opts",
)->run;

# ABSTRACT: Summary for `demo_cli_opts`
# PODNAME: peri-eg-demo-cli-opts-any

__END__

=pod

=encoding UTF-8

=head1 NAME

peri-eg-demo-cli-opts-any - Summary for `demo_cli_opts`

=head1 VERSION

This document describes version 0.05 of peri-eg-demo-cli-opts-any (from Perl distribution Perinci-Examples-Bin-Any), released on 2014-11-21.

=head1 SYNOPSIS

 % peri-eg-demo-cli-opts-any [options] <str1> <array1> ...

=head1 DESCRIPTION

Description for C<demo_cli_opts>.

This is another paragraph from the description. Description by default is
assumed to be marked up in I<Markdown> (currently referring to CommonMark).

 This paragraph should be set in verbatim.

=head1 OPTIONS

C<*> marks required options.

=head2 Cat1 options

=over

=item B<--bool1>

A bool option.

CLI framework should generate `--nobool1` (and `--nobool1`) automatically.

This option has an alias, `-z`. Because the alias has its own
summary/description, it will be displayed separately.


=item B<--flag1>, B<-f>

A flag option.

A flag option is a bool option with the value of 1 (true). It is meant to
activate something if specified and there is no notion of disabling by
specifying the opposite. Thus the CLI framework should not generate a
`--noflag1` option.

This flag has an alias `-f` with no summary/description nor code. So the CLI
framework should display the alias along with the option. Note that short
(single-letter) options/aliases do not get `--noX`.


=item B<--no-full>

Turn off full processing.

Another bool option with on default.

CLI framework should perhaps show `--nobool2` instead of `--bool2` because
`--bool2` is active by default. And if it does so, it should also show the
negative summary in the `summary.alt.neg` attribute instead of the normal
`summary` property.


=item B<-z>

This is summary for option `-z`.

This is description for option `-z` (actually a command-line alias). Since this
alias has its own summary/description, this


=back

=head2 Cat2 options

=over

=item B<--no-full2>

Another bool option with on default. Because this option does not have
`summary.alt.neg`, CLI framework should not show any summary, despite the
existence of `summary`.


=back

=head2 Common options

=over

=item B<--config-path>=I<s>

Set path to configuration file.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--format-options>=I<s>

Pass options to formatter.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

=item B<--help>, B<-h>, B<-?>

Display this help message.

=item B<--json>

Equivalent to --format=json-pretty.

=item B<--noconfig>, B<--no-config>

Do not use any configuration file.

=item B<--perl>

Equivalent to --format=perl.

=item B<--version>, B<-v>

Show version.

=item B<--yaml>

Equivalent to --format=yaml.

=back

=head2 Negation options

=over

=item B<--are-baz>

This demonstrate negation of --are-foo to --arent-foo.

=item B<--is-bar>

This demonstrate negation of --is-foo to --isnt-foo.

=item B<--with-foo>, B<--wf>

This demonstrate negation of --with-foo to --without-foo.

=back

=head2 Options

=over

=item B<--array1-json>=I<s>

Positional and greedy (JSON-encoded).

Argument with non-scalar types (like array or hash) can be specified in the CLI
using `--ARG-json` or `--ARG-yaml`. Arguments with type of array of string can
also be specified using multiple `--ARG` options.

This option also links to another option.


=item B<--array1-yaml>=I<s>

Positional and greedy (YAML-encoded).

Argument with non-scalar types (like array or hash) can be specified in the CLI
using `--ARG-json` or `--ARG-yaml`. Arguments with type of array of string can
also be specified using multiple `--ARG` options.

This option also links to another option.


=item B<--array1>=I<s@>*

Positional and greedy.

Argument with non-scalar types (like array or hash) can be specified in the CLI
using `--ARG-json` or `--ARG-yaml`. Arguments with type of array of string can
also be specified using multiple `--ARG` options.

This option also links to another option.


=item B<--female>

Alias for `--gender=F`.

=item B<--gender>=I<s>

A string option.

This option contains flag aliases that have code.


=item B<--hash1-json>=I<s>

Demonstrate hash argument with default value from schema (JSON-encoded).

=item B<--hash1-yaml>=I<s>

Demonstrate hash argument with default value from schema (YAML-encoded).

=item B<--hash1>=I<s>

Demonstrate hash argument with default value from schema.

Default value:

 {default=>1}

=item B<--input-base64>=I<s>

Specify input (base64-encoded).

This option demonstrates the `cmdline_src` property. Also, since schema type is
`buf`, we know that the value is binary data. CLI framework will provide
`--input-base64` to allow specifying binary data encoded in base64.


=item B<--input>=I<s>

Specify input.

This option demonstrates the `cmdline_src` property. Also, since schema type is
`buf`, we know that the value is binary data. CLI framework will provide
`--input-base64` to allow specifying binary data encoded in base64.


=item B<--int1>=I<i>*, B<-i>

Demonstrate an option with no summary. And a required option.


=item B<--int2>=I<i>

Another int option.

Default value:

 10

Demonstrate a scalar/simple default value.


=item B<--male>

Alias for `--gender=M`.

=item B<--output>=I<file>

Specify output filename.

This option demonstrates how the option would be displayed in the help/usage.
Due to the `x.schema.entity` attribute giving hint about what the value is, CLI
framework can show:

    --output=file

instead of the plain and less informative:

    --output=s


=item B<--pass>=I<s>, B<-p>

=item B<--str1>=I<s>*

A required option as well as positional argument.

=item B<-F>

Alias for `--female`.

=item B<-M>

Alias for `--male`.

=back

=head1 FILES

B</etc/peri-eg-demo-cli-opts-any.conf>

B<~/peri-eg-demo-cli-opts-any.conf>

=head1 BASH COMPLETION

This script has bash completion capability.

To activate bash completion for this script, put:

 complete -C peri-eg-demo-cli-opts-any peri-eg-demo-cli-opts-any

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

You can also install L<App::BashCompletionProg> which makes it easy to add completion for Perinci::CmdLine-based scripts. After you install the module and put C<. ~/.bash-complete-prog> (or C<. /etc/bash-complete-prog>), you can just run C<bash-completion-prog> and the C<complete> command will be added to your C<~/.bash-completion-prog>. Your next shell session will then recognize tab completion for the command.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/Perinci-Examples-Bin-Any>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-Perinci-Examples-Bin-Any>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Perinci-Examples-Bin-Any>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
